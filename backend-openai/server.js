require('dotenv').config(); // adapter le chemin si n√©cessaire

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { OpenAI } = require('openai');

const app = express();
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(bodyParser.json());
function getSystemPrompt(lang) {
  switch (lang) {
    case "en":
      return "You are the official assistant of EmploiAvenir, a French platform that helps vulnerable people find jobs. Respond in simple, clear English. Start all your answers with: [HR Assistant]";
    case "ar":
      return "ÿ£ŸÜÿ™ ÿßŸÑŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿ±ÿ≥ŸÖŸä ŸÑŸÖŸÜÿµÿ© EmploiAvenir ÿßŸÑÿ™Ÿä ÿ™ÿ≥ÿßÿπÿØ ÿßŸÑÿ£ÿ¥ÿÆÿßÿµ ŸÅŸä ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ Ÿàÿ∏ŸäŸÅÿ©. ÿ±ÿØ ÿ®ŸÑÿ∫ÿ© ÿπÿ±ÿ®Ÿäÿ© Ÿàÿßÿ∂ÿ≠ÿ© Ÿàÿ®ÿ≥Ÿäÿ∑ÿ©ÿå Ÿàÿßÿ®ÿØÿ£ ŸÉŸÑ ÿ•ÿ¨ÿßÿ®ÿ© ÿ®ŸÄ: [ÿßŸÑŸÖÿ≥ÿßÿπÿØ ÿßŸÑŸÖŸáŸÜŸä]";
    case "uk":
      return "–í–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —á–∞—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ EmploiAvenir. –î–æ–ø–æ–º–æ–∂—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑–Ω–∞–π—Ç–∏ —Ä–æ–±–æ—Ç—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ü–æ—á–∏–Ω–∞–π—Ç–µ –≤—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑: [HR –ü–æ–º—ñ—á–Ω–∏–∫]";
    default:
      return "Tu es le chatbot officiel d'EmploiAvenir. Aide les utilisateurs en fran√ßais simple. Commence toujours par : [Assistant RH]";
  }
}

/* === Route 1 : Chat simple === */
app.post('/api/chat', async (req, res) => {
  console.log("‚úÖ Route POST /api/chat appel√©e");

  const userMessage = req.body.message;
  const currentPage = req.body.page || '';

  let pageContext = '';
  if (currentPage.includes('choix-lm')) {
    pageContext = "Tu es actuellement sur la page pour r√©diger ou modifier une lettre de motivation. Soit l'utilisateur profite de notre IA pour la g√©n√©rer automatiquement, soit il peut importer une lettre existante pour la modifier avec l'IA.";
  } else if (currentPage.includes('choix-cv')) {
    pageContext = "Tu es actuellement sur la page pour cr√©er ou modifier un CV.";
  } else if (currentPage.includes('MesCandidature')) {
    pageContext = "Tu es sur la page qui permet de voir les candidatures en cours.";
  } else if (currentPage.includes('MonParcours')) {
    pageContext = "Tu es sur la page principale du parcours d'accompagnement. Tu retrouves les diff√©rentes √©tapes que l'on propose.";
  }
  else if (currentPage.includes('lettre_motivation')) {
    pageContext = "Tu es sur la page qui permet de g√©n√©rer automatiquement une lettre de motivation gr√¢ce √† l'IA.";
  }
  else if (currentPage.includes('Partenaires')) {
    pageContext = "Tu es sur la page de nos partenaires. Tu peux retrouver nos principaux partenaires √† savoir la Croix Rouge, l'AFPA, mission locale et France TRavail. On donne l'occasion √† l'utilisateur de prendre des rendez vous depuis notre plateforme.";
  }
  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: `
          Tu es le chatbot officiel d'EmploiAvenir, une plateforme qui utilise l'intelligence artificielle pour accompagner les personnes vuln√©rables dans leur insertion professionnelle. Ton r√¥le est de guider l'utilisateur pas √† pas, dans un langage simple, bienveillant et accessible, m√™me si la personne est perdue ou n'a aucune exp√©rience.

Commence toujours tes r√©ponses par : [Assistant EMPLOI AVENIR]

Tu peux proposer :
- Des conseils pour d√©marrer une recherche d'emploi
- Des redirections vers des pages du site quand c'est utile
- Du soutien et des questions simples pour aider la personne √† avancer

Sois clair et jamais impersonnel. Si quelqu‚Äôun dit qu‚Äôil n‚Äôa rien (ni CV, ni LM), tu dois **imm√©diatement l‚Äôorienter** vers :
üëâ "MonParcours.html" : pour l‚Äôaccompagnement complet
üëâ "choix-cv.html" : pour g√©n√©rer ou modifier un CV
üëâ "choix-lm.html" : pour r√©diger une lettre de motivation

Exemples de redirections utiles :
- Documents : "Documents.html"
- Parcours emploi : "MonParcours.html"
- Candidatures en cours : "MesCandidature.html"
- Pr√©parer un entretien : "preparation-entretien.html"
- Suite d‚Äôentretien : "apres-entretien.html"
- Signature ou contrat : "Contrat.html"

Si une r√©ponse courte peut suffire, propose un lien **et explique bri√®vement ce que l‚Äôutilisateur y trouvera**. Si la question est hors sujet (politique, sport, etc.), indique gentiment que tu es sp√©cialis√© en emploi.

**Important :** Si l‚Äôutilisateur t‚Äô√©crit "je suis perdu", "je n'ai rien", "je ne sais pas quoi faire", **n'attends pas**, propose directement un accompagnement et une premi√®re action concr√®te.

Sois toujours rassurant, encourageant et structur√©.

Si la personne te demande pourquoi l'IA, quelles sont les utilit√©s de l'intelligence artificielle etc, tu peux mentionner le fait que l'on propose des g√©n√©rations de lettre de motivation automatiques gr√¢ce √† l'IA, que l'on peut modifier des documents gr√¢ce √† l'IA, et que toi, le chatbot, tu es bas√©e sur de l'IA.

Si jamais quelqu'un te demande c'est quoi les √©tapes du parcours pour s'ins√©rer professionnellement. Tu le renvoies vers la page "MonParcours.html" et tu lui dis que les √©tapes sur notre plateforme sont : 
1- Quiz
2- CV
3- Lettre de motivation 
4- Recherche d'offres
5- Entretien et apr√®s entretien 
6- Contrat 
7- F√©licitations !
${pageContext}

          ` },
        { role: 'user', content: userMessage }
      ],
    });

    const botReply = completion.choices[0].message.content;
    res.json({ reply: botReply });
  } catch (error) {
  console.error('‚ùå Erreur OpenAI (chat):', error.message);
  console.error(error.stack);
  res.status(500).json({ reply: 'Une erreur est survenue. Merci de r√©essayer plus tard.' });
  }
});

/* === Route 2 : G√©n√©ration de lettre de motivation === */
app.post('/api/generer-lettre', async (req, res) => {
  const { nom, email, poste, entreprise, motivation_poste, valeur_ajoutee } = req.body;

  const prompt = `R√©dige une lettre de motivation pour ${nom} qui postule au poste de ${poste} chez ${entreprise}.
Motivation : ${motivation_poste}.
Ce qu'il/elle peut apporter : ${valeur_ajoutee}.`;

  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: "system", content: "Tu es un assistant RH qui r√©dige des lettres de motivation professionnelles." },
        { role: "user", content: prompt }
      ],
      temperature: 0.7
    });

    res.json({ text: completion.choices[0].message.content });
  } catch (error) {
    console.error('‚ùå Erreur OpenAI (lettre):', error.message);
    res.status(500).json({ error: 'Erreur lors de la g√©n√©ration de la lettre.' });
  }
});

/* Am√©lioration LM */
app.post("/api/ameliore-lettre", async (req, res) => {
  try {
    const texte = req.body.texte;

    if (!texte || texte.trim().length < 100) {
      return res.status(400).json({ error: "Le texte de la lettre est trop court ou vide." });
    }

    // Prompt de demande √† OpenAI (GPT-4)
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo", // Ou gpt-3.5-turbo si tu veux r√©duire les co√ªts
      messages: [
        {
          role: "system",
          content: "Tu es un assistant RH expert en r√©daction de lettres de motivation."
        },
        {
          role: "user",
          content: `Voici une lettre de motivation √©crite par une personne en recherche d'emploi. Ta mission est de l'am√©liorer : style, grammaire, impact, clart√©. Garde le fond mais am√©liore la forme. Voici le texte original :\n\n${texte}`
        }
      ],
      temperature: 0.7,
      max_tokens: 1000
    });

    const reponse = completion.choices[0].message.content;

    res.json({ ameliore: reponse });

  } catch (error) {
    console.error("Erreur lors de l'appel √† OpenAI :", error.message);
    res.status(500).json({ error: "Une erreur est survenue lors de l'am√©lioration de la lettre." });
  }
});

const { Document, Packer, Paragraph, TextRun } = require("docx");
const fs = require("fs");
const path = require("path");

app.post("/api/export-word", async (req, res) => {
  try {
    const { texte } = req.body;

    if (!texte) {
      return res.status(400).json({ error: "Texte manquant" });
    }

    // Cr√©ation du document Word avec chaque paragraphe
    const doc = new Document({
      sections: [
        {
          children: texte.split('\n').map(line =>
            new Paragraph({
              children: [new TextRun(line)],
              spacing: { after: 200 }
            })
          )
        }
      ]
    });

    // Cr√©ation du buffer Word
    const buffer = await Packer.toBuffer(doc);

    // Envoie du fichier au client
    res.setHeader("Content-Type", "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
    res.setHeader("Content-Disposition", "attachment; filename=lettre_amelior√©e.docx");
    res.send(buffer);

  } catch (error) {
    console.error("Erreur export Word :", error);
    res.status(500).json({ error: "Erreur lors de la g√©n√©ration du document Word." });
  }
});



// D√©marrage du serveur
app.listen(PORT, () => {
  console.log(`‚úÖ Serveur backend d√©marr√© sur http://localhost:${PORT}`);
});
